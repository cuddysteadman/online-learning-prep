# -*- coding: utf-8 -*-
"""testing_algorithm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UVTlDqqtek4L-Ja10xU0HtWyTIqU6xlG
"""

from google.colab import files
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from pandas.plotting import table
import six
def reset_score(score):
  if score >= 100:
    score = 100
  return score
files.upload() # upload testing_algorithm.csv
dataset = pd.read_csv('testing_algorithm.csv')
for i in range(len(dataset)):
  time_online = dataset.iloc[i,1]
  posts = dataset.iloc[i, 2]
  assignment_time = dataset.iloc[i, 3]
  time_online = 13.19 + 46.28 * time_online  - 12.16 * (time_online ** 2) + 1.32 * (time_online ** 3) - 0.05 * (time_online ** 4)
  posts = 35.69 + 65.13 * posts
  assignment_time *= 13.97
  assignment_time = reset_score(assignment_time)
  posts = reset_score(posts)
  time_online = reset_score(time_online)
  total = posts + time_online + assignment_time
  total /= 3
  total = reset_score(total)
  dataset.at[i, 'predicted_score'] = total
dataset = dataset.astype(int)
dataset['student'] += 1
mean_diff = np.mean(abs(dataset['predicted_score'] - dataset['actual_score']))
mean_diff = round(mean_diff, 2)
print("Our mean difference between the predicted score and actual score is: {}".format(mean_diff))
def render_mpl_table(data, col_width=3.0, row_height=0.625, font_size=14,
                     header_color='#40466e', row_colors=['#f1f1f2', 'w'], edge_color='w',
                     bbox=[0, 0, 1, 1], header_columns=0,
                     ax=None, **kwargs):
    if ax is None:
        size = (np.array(data.shape[::-1]) + np.array([0, 1])) * np.array([col_width, row_height])
        fig, ax = plt.subplots(figsize=size)
        ax.axis('off')

    mpl_table = ax.table(cellText=data.values, bbox=bbox, colLabels=data.columns, **kwargs)

    mpl_table.auto_set_font_size(False)
    mpl_table.set_fontsize(font_size)

    for k, cell in  six.iteritems(mpl_table._cells):
        cell.set_edgecolor(edge_color)
        if k[0] == 0 or k[1] < header_columns:
            cell.set_text_props(weight='bold', color='w')
            cell.set_facecolor(header_color)
        else:
            cell.set_facecolor(row_colors[k[0]%len(row_colors) ])
    return ax
render_mpl_table(dataset, header_columns=0, col_width=3.0)

