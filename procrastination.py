# -*- coding: utf-8 -*-
"""Procrastination.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1toD8X6GBINH9PQS1OtOvIGWpHJ6cA0VH
"""

import numpy as np
import pandas as pd
import sklearn 
import sklearn.datasets
import sklearn.linear_model
import sklearn.metrics
import matplotlib.pyplot as plt
from google.colab import files
from sklearn.linear_model import HuberRegressor
from sklearn.metrics import mean_squared_error
from sklearn.linear_model import Ridge
from sklearn.metrics import r2_score
from sklearn.model_selection import GridSearchCV
def train_val_test_split(dataset):
  return np.split(dataset, [int(dataset.shape[0] * 0.8), int(dataset.shape[0] * 0.9)])
# files.upload()
# files.upload()

def abline(slope, intercept):
    axes = plt.gca()
    x_vals = np.array(axes.get_xlim())
    y_vals = intercept + slope * x_vals
    plt.plot(x_vals, y_vals, '-', color='black', label='Predicted Score as a Function of X')

data1 = pd.read_csv('online_posts_data.csv', decimal = ',')
data1 = data1.drop(columns = ['total_posts', 'timeonline', 'students', 'helpful_post', 'nice_code_post', 'collaborative_post', 'confused_post', 'creative_post', 'bad_post', 'amazing_post', 'Approved'])
col = data1.loc[: , "sk1_classroom":"sk4_classroom"]
data1['avg_score'] = col.mean(axis=1)
dataset = pd.read_csv('online_posts_data.csv', decimal = ',')
dataset = dataset.drop(columns = ['sk1_classroom', 'students', 'helpful_post', 'nice_code_post', 'collaborative_post', 'confused_post', 'creative_post', 'bad_post', 'amazing_post', 'sk2_classroom', 'sk5_classroom', 'sk3_classroom', 'sk4_classroom', 'Approved'])
data1['avg_score'] *= 10
data1 = data1.drop(columns = ['sk1_classroom', 'sk2_classroom', 'sk3_classroom', 'sk5_classroom', 'sk4_classroom'])
dataset['final_score']= data1['avg_score']
dataset.columns = ['total_posts', 'time_online', 'final_score']
dataset = dataset.astype('float')
z1 = dataset['total_posts']
y1 = dataset['final_score']
x1 = dataset['time_online']
x1 /= 960
z1 /= 16

indexNames = dataset[dataset['time_online'] >= 25].index
dataset.drop(indexNames, inplace=True)
z1 = dataset['total_posts']
y1 = dataset['final_score']
x1 = dataset['time_online']
X, y = dataset[['time_online', 'total_posts']].values, dataset['final_score'].values
X_train, X_val, X_test = train_val_test_split(X)
y_train, y_val, y_test = train_val_test_split(y)

model = Ridge(fit_intercept = True)
model.fit(trans_standard_X_train, y_train)

w = model.coef_
b = model.intercept_
plt.scatter(dataset['total_posts'], dataset['final_score'])
abline(w[0], b)
plt.show()
yhat_train = model.predict(trans_standard_X_train)
yhat_val = model.predict(trans_standard_X_val)
r2 = r2_score(y_train, yhat_train)
print(r2)
print(w)
print(b)
from sklearn.metrics import mean_squared_error
print(sklearn.metrics.mean_squared_error(yhat_train, y_train))
print(sklearn.metrics.mean_squared_error(yhat_val, y_val))


dataset = pd.read_csv('procrastination.csv')
dataset = dataset.drop(columns = ['id_assessment', 'id_student', 'is_banked'])
dataset = dataset[:359]
dataset = dataset.dropna()
dataset.columns = ['date_submitted', 'final_score']
x = dataset['date_submitted']
y = dataset['final_score']
dataset = dataset[~(x >= 40) | ~(y <=200)]
x = dataset['date_submitted']
y = dataset['final_score']

total_time = np.max(x) - np.min(x)
dataset.sample(frac=1)
X, y = x.values, y.values
np.random.shuffle(X)
np.random.shuffle(y)
X = X.reshape((-1, 1))
DEGREE = 3
n = X.shape[0]
trans_X = np.repeat(X[:, 0], DEGREE). reshape((n, DEGREE))

for i in range(2, DEGREE + 1):
  trans_X[:, i-1] **= i
means = np.mean(trans_X, axis=0)
stds = np.std(trans_X, axis=0)
trans_standard_X = trans_X.copy()
trans_standard_X -= means
trans_standard_X -= stds
def train_val_test_split(dataset):
  rows = trans_standard_X.shape[0]
  return np.split(dataset, [int(rows * 0.8), int(rows * 0.9)])
trans_standard_X_train, trans_standard_X_val, trans_standard_X_test = train_val_test_split(trans_standard_X)
y_train, y_val, y_test = train_val_test_split(y)
X_train, X_val, X_test = train_val_test_split(X)
y_train, y_val, y_test = train_val_test_split(y)
model = Ridge(fit_intercept = True)
model.fit(X_train, y_train)
w1 = model.coef_
yhat_train = model.predict(X_train)
yhat_val = model.predict(X_val)

print(mean_squared_error(yhat_train, y_train))
print(mean_squared_error(yhat_val, y_val))
print(r2_score(y_val, yhat_val))


time_online_student = float(input("How many hours a week does your student spend in online schooling?"))
total_posts_by_student = float(input("How many times does your student ask for help in a week?"))
predicted_score_engagement = w[0] * time_online_student + w[1] * total_posts_by_student + b
days_spent = float(input("If your student was given 14 days to complete an assignment, how long would they spend on it?"))
ratio =  total_time / 14
w1 *= ratio
predicted_score_procrastination = w1 * days_spent
if predicted_score_procrastination > 100:
  predicted_score_procrastination = 100
predicted_score = predicted_score_procrastination + predicted_score_engagement
predicted_score /= 2
# if predicted_score > 100:
  # predicted_score = 100
print("Your child's predicted score is: {}".format(int(predicted_score)))
print(predicted_score_procrastination)





ridge = Ridge()
parameters = {'alpha': [1e-15, 1e-10, 1e-8, 1e-4, 1e-3, 1e-2, 1, 5, 10, 20]}
ridge_regressor = GridSearchCV(ridge, parameters, scoring='neg_mean_squared_error', cv = 5)
ridge_regressor.fit(X, y)
print(ridge_regressor.best_params_)
print(ridge_regressor.best_score_)

plt.scatter(np.log(x1), y)