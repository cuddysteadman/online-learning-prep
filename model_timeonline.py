# -*- coding: utf-8 -*-
"""model_timeonline.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H6qtOihoCiGofv8TJ6W4l_sL-TiA1XcS
"""

import numpy as np
import pandas as pd
import sklearn 
import sklearn.datasets
import sklearn.linear_model
import sklearn.metrics
import matplotlib.pyplot as plt
from google.colab import files
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
def abline(slope, intercept):
    axes = plt.gca()
    x_vals = np.array(axes.get_xlim())
    y_vals = intercept + slope * x_vals
    plt.plot(x_vals, y_vals, '-', color='black', label='Predicted Score as a Function of X')
def train_val_test_split(dataset):
  rows = X.shape[0]
  return np.split(dataset, [int(rows * 0.8), int(rows * 0.9)])

files.upload() # upload online_classroom_data_formatted.csv

dataset = pd.read_csv('online_classroom_data_formatted.csv')
degree = 4
X, y = dataset['time_online'].values, dataset['final_score'].values
X = X.reshape(-1, 1)
X_train, X_val, X_test = train_val_test_split(X)
y_train, y_val, y_test = train_val_test_split(y)
model=make_pipeline(PolynomialFeatures(degree),LinearRegression(fit_intercept=True))
model.fit(X_train,y_train)

X, y = dataset['time_online'].values, dataset['final_score'].values
X = X.reshape(-1, 1)
X_train, X_val, X_test = train_val_test_split(X)
y_train, y_val, y_test = train_val_test_split(y)
X_seq = np.linspace(X_train.min(),X_train.max(),300).reshape(-1,1)
yhat_train = model.predict(X_train)
r = r2_score(y_train, yhat_train)
r **= 0.5
print("our mean squared error is: {}".format(mean_squared_error(yhat_train, y_train)))
print("our r value is: {}".format(r))
print("our coefficient for the x-term is: {}".format(model.steps[1][1].coef_))
print("our intercept of the function is: {}".format(model.steps[1][1].intercept_))
print("Judging by the output, we realize that our function is as follows:")
a = r'f(x) = 13.19 + 46.28x - 12.16x^2 + 1.32x^3 - 0.05x^4'
ax = plt.axes([0,0,0.3,0.3])
ax.set_xticks([])
ax.set_yticks([])
ax.axis('off')
plt.text(0.4,0.4,'$%s$' %a,size=20,color="black")
plt.figure()
plt.scatter(X, y)
plt.plot(X_seq,model.predict(X_seq),color="black")
plt.show()