# -*- coding: utf-8 -*-
"""making_graphs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13gLXCc7HlUaD_ox6k445_9LwAX6xjhBS
"""

import numpy as np
import pandas as pd
import sklearn 
import sklearn.datasets
import sklearn.linear_model
import sklearn.metrics
import matplotlib.pyplot as plt
from google.colab import files
from sklearn.preprocessing import PolynomialFeatures
from sklearn.pipeline import make_pipeline
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
def train_val_test_split(dataset):
  rows = X.shape[0]
  return np.split(dataset, [int(rows * 0.8), int(rows * 0.9)])
def abline(slope, intercept):
    axes = plt.gca()
    x_vals = np.array(axes.get_xlim())
    y_vals = intercept + slope * x_vals
    plt.plot(x_vals, y_vals, '-', color='black', label='Predicted Score as a Function of X')
files.upload() # upload online_classroom_data_formatted.csv and studentassesment.csv
files.upload()
dataset = pd.read_csv('online_classroom_data_formatted.csv')
X, y = dataset['time_online'].values, dataset['final_score'].values
X = X.reshape(-1, 1)
X_train, X_val, X_test = train_val_test_split(X)
y_train, y_val, y_test = train_val_test_split(y)
X_seq = np.linspace(X_train.min(),X_train.max(),300).reshape(-1,1)
degree=64
data = np.arange(degree)
data2 = np.zeros((degree, 1))
for i in range(1, degree):
  degree = i
  polyreg=make_pipeline(PolynomialFeatures(degree),LinearRegression(fit_intercept=True))
  polyreg.fit(X,y)
  X, y = dataset['time_online'].values, dataset['final_score'].values
  X = X.reshape(-1, 1)
  X_train, X_val, X_test = train_val_test_split(X)
  y_train, y_val, y_test = train_val_test_split(y)
  yhat_train = polyreg.predict(X_train)
  yhat_val = polyreg.predict(X_val)
  r2 = r2_score(y_train, yhat_train)
  r2 **= 0.5
  mse = mean_squared_error(yhat_train, y_train)
  r2 = np.atleast_1d(r2)
  mse = np.atleast_1d(mse)
  data2[i] = r2 # change this to r2 and mse to toggle between the 2 graphs
data2 = data2.reshape(-1, 1)
data = data.reshape(-1, 1)
data = np.hstack((data, data2))

plt.scatter(data[:, 0], data[:, 1])
plt.xlabel('Degree of Polynomial')
plt.ylabel('Coefficient of Correlation R')
plt.title('Degree of Polynomial Being Used vs. Coefficient of Correlation R for Polynomial Regression Model')
plt.show()
dataset = pd.read_csv('online_classroom_data_formatted.csv')
X, y = dataset['time_online'].values, dataset['final_score'].values
X = X.reshape(-1, 1)
X_train, X_val, X_test = train_val_test_split(X)
y_train, y_val, y_test = train_val_test_split(y)
X_seq = np.linspace(X_train.min(),X_train.max(),300).reshape(-1,1)
degree=64
data = np.arange(degree)
data2 = np.zeros((degree, 1))
for i in range(1, degree):
  degree = i
  polyreg=make_pipeline(PolynomialFeatures(degree),LinearRegression(fit_intercept=True))
  polyreg.fit(X,y)
  X, y = dataset['time_online'].values, dataset['final_score'].values
  X = X.reshape(-1, 1)
  X_train, X_val, X_test = train_val_test_split(X)
  y_train, y_val, y_test = train_val_test_split(y)
  yhat_train = polyreg.predict(X_train)
  yhat_val = polyreg.predict(X_val)
  r2 = r2_score(y_train, yhat_train)
  r2 **= 0.5
  mse = mean_squared_error(yhat_train, y_train)
  r2 = np.atleast_1d(r2)
  mse = np.atleast_1d(mse)
  data2[i] = mse # change this to r2 and mse to toggle between the 2 graphs
data2 = data2.reshape(-1, 1)
data = data.reshape(-1, 1)
data = np.hstack((data, data2))

plt.scatter(data[:, 0], data[:, 1])
plt.xlabel('Degree of Polynomial')
plt.ylabel('Mean Squared Error')
plt.title('Degree of Polynomial Being Used vs. Mean Squared Error of Polynomial Regression')
plt.show()

degree = 4
X, y = dataset['time_online'].values, dataset['final_score'].values
X = X.reshape(-1, 1)
X_train, X_val, X_test = train_val_test_split(X)
y_train, y_val, y_test = train_val_test_split(y)
polyreg=make_pipeline(PolynomialFeatures(degree),LinearRegression(fit_intercept=True))
polyreg.fit(X_train,y_train)

plt.figure()
plt.scatter(X,y)
plt.plot(X_seq,polyreg.predict(X_seq),color="black")
plt.title("Time Online vs Predicted Score with 5th Degree Polynomial Regression")
plt.xlabel("Time Online")
plt.ylabel("Predicted Score")
plt.show()

X, y = dataset['total_posts'].values, dataset['final_score'].values
X = X.reshape(-1, 1)
plt.figure()
plt.scatter(X, y)
plt.title('Average Amt of Times Asked for Help per Week vs Predicted Score with Ridge Regression')
plt.xlabel('Average Amt of Times Asked for Help Per Week')
plt.ylabel('Predicted Score')
abline(65.13, 35.69)
plt.show()

dataset = pd.read_csv('studentAssesment_formatted.csv')
x = dataset['date_submitted']
y = dataset['final_score']
X, y = x.values, y.values

plt.figure()
plt.scatter(X, y)
abline(13.97, 0)
plt.axis([0, 15, 0, 100])
plt.xlabel('Days Spent on 14-Day Assignment')
plt.ylabel('Predicted Score')
plt.title('Days Spent on 14-Day Assignment vs Predicted Score with Ridge Regression')
plt.show()